# define a default docker image for all jobs
image: node:6.10

variables:
    # replace this with YOUR custom bucket name
    S3_BUCKET: pipeline-demo-temi
    AWS_DEFAULT_REGION: eu-west-1

stages:
    - install  # install all npm dependencies
    - test     # execute unit tests
    - package  # upload source code to S3
    - qaCreate # create the stack from stack for QA
    - qaTest   # test on the QA stack
    - qaRemove # remove the QA stack
    - deploy   # stage for deploying to production

npmInstall:
    stage: install
    script:
        - npm install --production
    # artifacts describe the result of the stage
    # that can be used in consecutive stages
    artifacts:
        untracked: true

linting:
    stage: test
    script:
        # install standardjs for linting
        - npm install -g standard
        - npm run-script lint

unittesting:
    stage: test
    # use the artifcats of the 'npmInstall' job
    dependencies:
        - npmInstall
    script:
        # install dev-dependency mocha
        - npm install
        - npm test

packageApp:
    stage: package
    image: tarekbecker/awscli
    # use the artifcats of the 'npmInstall' job
    dependencies:
        - npmInstall
    script:
        # package uploads the source code to S3 and creates a new
        # template file with a reference to the code in S3
        - aws cloudformation package --template template.yml --s3-bucket $S3_BUCKET --output-template template-export.yml
    artifacts:
        paths:
            # the modified template is the result of this stage
            - ./template-export.yml

createTestStack:
    stage: qaCreate
    image: tarekbecker/awscli
    dependencies:
        - packageApp
    script:
        # same command as deployProd, but the stack name includes the
        # pipeline id. This allows testing multiple pipelines concurrently.
        - aws cloudformation deploy --template-file template-export.yml --stack-name demo-pipeline-test-$CI_PIPELINE_ID --capabilities CAPABILITY_IAM

testOnTestStack:
    stage: qaTest
    dependencies:
        - npmInstall
    script:
        - npm install aws-sdk
        - node test/qatest.js "demo-pipeline-test-$CI_PIPELINE_ID"

removeTestStack:
    stage: qaRemove
    image: tarekbecker/awscli
    script:
        - aws cloudformation delete-stack --stack-name demo-pipeline-test-$CI_PIPELINE_ID
        - sleep 60
        - timeout -t 190 aws cloudformation wait stack-delete-complete --stack-name demo-pipeline-test-$CI_PIPELINE_ID || (echo 'Stack deletion failed.' && exit 1)
    # execute this job even if one of the previous ones failed
    # to ensure not having orphan stacks
    when: always

deployProd:
    stage: deploy
    image: tarekbecker/awscli
    dependencies:
        - packageApp
    script:
        # use the template-export file to deploy the stack
        # the cloud formation stack name is prod for our stack
        - aws cloudformation deploy --template-file template-export.yml --stack-name demo-pipeline-prod-stack --capabilities CAPABILITY_IAM
